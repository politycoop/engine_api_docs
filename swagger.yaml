openapi: 3.0.2
info:
  version: 3.0.0
  title: Ethelo Engine Api
  description: Limited API for solving with the Ethelo Engine
  contact:
    name: Laura Williams
paths:
  /v3/decisions/:
    post:
      operationId: create/v3/decision
      description: Create Decision Configuration
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - type
                    - id
                  additionalProperties: false
                  properties:
                    type:
                      $ref: '#/components/schemas/type'
                    id:
                      $ref: '#/components/schemas/id'
                    links:
                      type: object
                      properties:
                        self:
                          $ref: '#/components/schemas/link'
                    attributes:
                      type: object
                      properties:
                        title:
                          type: string
                          nullable: false
                          description: Identifying string for Decision
                        info:
                          nullable: true
                          description: content for Decision, often with html
                          type: string
                        slug:
                          nullable: false
                          description: url-safe unique identifier
                          type: string
                        option-vote-bins:
                          type: integer
                          nullable: false
                          default: 5
                          example: 5
                          minimum: 1
                          maximum: 7
                          description: the number of bins to use in voting interfaces and results analysis
                        max-scenarios:
                          type: integer
                          nullable: false
                          default: 3
                          example: 3
                          minimum: 1
                          maximum: 5
                          description: maximum amount of group scenarios to generate
      responses:
        '200':
          description: create/v3/decision
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Decision'
                  included:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/resource'
                  links:
                    description: Link members related to primary data
                    allOf:
                      - $ref: '#/components/schemas/links'
                      - $ref: '#/components/schemas/pagination'
                  jsonapi:
                    $ref: '#/components/schemas/jsonapi'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '403':
          description: '[Forbidden](https://jsonapi.org/format/#crud-updating-responses-403)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: '[Related resource does not exist](https://jsonapi.org/format/#crud-updating-responses-404)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
  /v3/decisions/{decision_id}/:
    get:
      operationId: retrieve/v3/decision/{decision_id}/
      description: An Ethelo Decision Configuration
      parameters:
        - name: decision_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
      responses:
        '200':
          description: retrieve/v3/decision/{decision_id}/
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Decision'
                  included:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/resource'
                  jsonapi:
                    $ref: '#/components/schemas/jsonapi'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
    post:
      operationId: update/v3/decision/{decision_id}/
      description: Update Configuration
      parameters:
        - name: decision_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: string
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - type
                    - id
                  additionalProperties: false
                  properties:
                    type:
                      $ref: '#/components/schemas/type'
                    id:
                      $ref: '#/components/schemas/id'
                    links:
                      type: object
                      properties:
                        self:
                          $ref: '#/components/schemas/link'
                    attributes:
                      type: object
                      properties:
                        title:
                          type: string
                          nullable: false
                          description: Identifying string for Decision
                        info:
                          nullable: true
                          description: content for Decision, often with html
                          type: string
                        slug:
                          nullable: false
                          description: url-safe unique identifier
                          type: string
                        current-mode:
                          default: pending
                          example: open
                          nullable: false
                          enum:
                            - pending
                            - open
                            - finished
                          description: state/mode of decision. Only open Decisions can accept votes
                        option-vote-bins:
                          type: integer
                          nullable: false
                          default: 5
                          example: 5
                          minimum: 1
                          maximum: 7
                          description: the number of bins to use in voting interfaces and results analysis
                        max-scenarios:
                          type: integer
                          nullable: false
                          default: 3
                          example: 3
                          minimum: 1
                          maximum: 5
                          description: maximum amount of group scenarios to generate

      responses:
        '200':
          description: partial_update/v3/decision/{decision_id}/
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Decision'
                  included:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/resource'
                  links:
                    description: Link members related to primary data
                    allOf:
                      - $ref: '#/components/schemas/links'
                      - $ref: '#/components/schemas/pagination'
                  jsonapi:
                    $ref: '#/components/schemas/jsonapi'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '403':
          description: '[Forbidden](https://jsonapi.org/format/#crud-updating-responses-403)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: '[Related resource does not exist](https://jsonapi.org/format/#crud-updating-responses-404)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
    delete:
      operationId: destroy/v3/decision/{decision_id}/
      description: delete a decision
      parameters:
        - name: decision_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: string
      responses:
        '200':
          description: '[OK](https://jsonapi.org/format/#crud-deleting-responses-200)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/onlymeta'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: '[Resource does not exist](https://jsonapi.org/format/#crud-deleting-responses-404)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
  /v3/decisions/{decision_id}/participants/:
    get:
      operationId: List/v3/decisions/{decision_id}/participants/
      description: 'Participants configured for decision'
      parameters:
        - $ref: '#/components/parameters/sort'
        - name: decision_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
        - name: page[number]
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: page[size]
          required: false
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
        - name: sort
          required: false
          in: query
          description: Which field to use when ordering the results.
          schema:
            type: string
        - name: filter[slug]
          required: false
          in: query
          description: slug
          schema:
            type: string
      responses:
        '200':
          description: List/v3/decisions/{decision_id}/participants/
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Participant'
                  included:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/resource'
                  links:
                    description: Link participants related to primary data
                    allOf:
                      - $ref: '#/components/schemas/links'
                      - $ref: '#/components/schemas/pagination'
                  jsonapi:
                    $ref: '#/components/schemas/jsonapi'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
    post:
      operationId: create/v3/decision/{decision_id}/participants
      description: Update Participant
      parameters:
        - name: decision_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - type
                    - id
                  additionalProperties: false
                  properties:
                    type:
                      $ref: '#/components/schemas/type'
                    id:
                      $ref: '#/components/schemas/id'
                    links:
                      type: object
                      properties:
                        self:
                          $ref: '#/components/schemas/link'
                    attributes:
                      type: object
                      properties:
                        slug:
                          type: string
                          description: unique identifier
                        influence:
                          type: integer
                          description: weighting for votes

      responses:
        '200':
          description: create/v3/decision/{decision_id}/participants
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Decision'
                  included:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/resource'
                  links:
                    description: Link members related to primary data
                    allOf:
                      - $ref: '#/components/schemas/links'
                      - $ref: '#/components/schemas/pagination'
                  jsonapi:
                    $ref: '#/components/schemas/jsonapi'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '403':
          description: '[Forbidden](https://jsonapi.org/format/#crud-updating-responses-403)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: '[Related resource does not exist](https://jsonapi.org/format/#crud-updating-responses-404)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
  /v3/decisions/{decision_id}/participants/{participant_id}:
    get:
      operationId: retrieve/v3/decisions/{decision_id}/participants/{participant_id}
      description: An Ethelo Decision Configuration
      parameters:
        - name: decision_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
        - name: participant_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
      responses:
        '200':
          description: retrieve/v3/decisions/{decision_id}/participants/{participant_id}
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Participant'
                  included:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/resource'
                  jsonapi:
                    $ref: '#/components/schemas/jsonapi'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
    post:
      operationId: update/v3/decision/{decision_id}/participants/{participant_id}
      description: Update Participant
      parameters:
        - name: decision_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
        - name: participant_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - type
                    - id
                  additionalProperties: false
                  properties:
                    type:
                      $ref: '#/components/schemas/type'
                    id:
                      $ref: '#/components/schemas/id'
                    links:
                      type: object
                      properties:
                        self:
                          $ref: '#/components/schemas/link'
                    attributes:
                      type: object
                      properties:
                        slug:
                          type: string
                          description: unique identifier
                        influence:
                          type: integer
                          description: weighting for votes
      responses:
        '200':
          description: partial_update/v3/decision/{decision_id}/{participant_id}
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Decision'
                  included:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/resource'
                  links:
                    description: Link members related to primary data
                    allOf:
                      - $ref: '#/components/schemas/links'
                      - $ref: '#/components/schemas/pagination'
                  jsonapi:
                    $ref: '#/components/schemas/jsonapi'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '403':
          description: '[Forbidden](https://jsonapi.org/format/#crud-updating-responses-403)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: '[Related resource does not exist](https://jsonapi.org/format/#crud-updating-responses-404)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
    delete:
      operationId: destroy/v3/decision/{decision_id}/participants/{participant_id}
      description: delete a Participant
      parameters:
        - name: decision_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
        - name: participant_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
      responses:
        '200':
          description: '[OK](https://jsonapi.org/format/#crud-deleting-responses-200)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/onlymeta'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: '[Resource does not exist](https://jsonapi.org/format/#crud-deleting-responses-404)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
  /v3/decisions/{decision_id}/bin_votes:
    get:
      operationId: List/v3/decisions/{decision_id}/bin_votes/
      description: 'Participants configured for decision'
      parameters:
        - $ref: '#/components/parameters/sort'
        - name: decision_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
        - name: page[number]
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: page[size]
          required: false
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
        - name: sort
          required: false
          in: query
          description: Which field to use when ordering the results.
          schema:
            type: string
      responses:
        '200':
          description: List/v3/decisions/{decision_id}/bin_votes/
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BinVote'
                  included:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/resource'
                  links:
                    description: Link bin_votes related to primary data
                    allOf:
                      - $ref: '#/components/schemas/links'
                      - $ref: '#/components/schemas/pagination'
                  jsonapi:
                    $ref: '#/components/schemas/jsonapi'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
    post:
      operationId: upsert/v3/decision/{decision_id}/bin_votes
      description: upsert BinVote
      parameters:
        - name: decision_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - type
                    - id
                  additionalProperties: false
                  properties:
                    type:
                      $ref: '#/components/schemas/type'
                    id:
                      $ref: '#/components/schemas/id'
                    links:
                      type: object
                      properties:
                        self:
                          $ref: '#/components/schemas/link'
                    attributes:
                      type: object
                      properties:
                        bin:
                          type: integer
                          description: selected bin
                      required:
                        - bin
                    relationships:
                      type: object
                      properties:
                        participant:
                          $ref: '#/components/schemas/reltoone'
                        option:
                          $ref: '#/components/schemas/reltoone'
                        criteria:
                          $ref: '#/components/schemas/reltoone'
      responses:
        '200':
          description: upsert/v3/decision/{decision_id}/bin_votes
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Decision'
                  included:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/resource'
                  links:
                    description: Link members related to primary data
                    allOf:
                      - $ref: '#/components/schemas/links'
                      - $ref: '#/components/schemas/pagination'
                  jsonapi:
                    $ref: '#/components/schemas/jsonapi'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '403':
          description: '[Forbidden](https://jsonapi.org/format/#crud-updating-responses-403)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: '[Related resource does not exist](https://jsonapi.org/format/#crud-updating-responses-404)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
    delete:
      operationId: destroy/v3/decision/{decision_id}/bin_votes
      description: delete a BinVote
      parameters:
        - name: decision_id
          in: path
          required: true
          description: globally unique id
          schema:
            type: integer
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - type
                    - id
                  additionalProperties: false
                  properties:
                    type:
                      $ref: '#/components/schemas/type'
                    id:
                      $ref: '#/components/schemas/id'
                    links:
                      type: object
                      properties:
                        self:
                          $ref: '#/components/schemas/link'
                    relationships:
                      type: object
                      properties:
                        participant:
                          $ref: '#/components/schemas/reltoone'
                        option:
                          $ref: '#/components/schemas/reltoone'
                        criteria:
                          $ref: '#/components/schemas/reltoone'
      responses:
        '200':
          description: '[OK](https://jsonapi.org/format/#crud-deleting-responses-200)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/onlymeta'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: '[Resource does not exist](https://jsonapi.org/format/#crud-deleting-responses-404)'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
  /v3/decisions/{decision_id}/scenarios/:
    get:
      operationId: List/v3/decisions/{decision_id}/scenarios/
      description: 'Scenarios calculated for decision'
      parameters:
        - name: decision_id
          required: true
          in: path
          description: unique Id for Decision
          schema:
            type: string
        - name: participant_id
          required: false
          in: query
          description: unique Id for Participant
          schema:
            type: string
        - name: with global
          required: false
          in: query
          description: toggle if global scenario should be included
          schema:
            type: string
      responses:
        '200':
          description: List/v3/decisions/{decision_id}/scenarios/
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Scenario'
                  included:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/resource'
                  links:
                    description: Link scenarios related to primary data
                    allOf:
                      - $ref: '#/components/schemas/links'
                      - $ref: '#/components/schemas/pagination'
                  jsonapi:
                    $ref: '#/components/schemas/jsonapi'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
        '404':
          description: not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/failure'
components:
  schemas:
    jsonapi:
      type: object
      description: The server's implementation
      properties:
        version:
          type: string
        meta:
          $ref: '#/components/schemas/meta'
      additionalProperties: false
    resource:
      type: object
      required:
        - type
        - id
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        attributes:
          type: object
        relationships:
          type: object
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
    link:
      oneOf:
        - description: a string containing the link's URL
          type: string
          format: uri-reference
        - type: object
          required:
            - href
          properties:
            href:
              description: a string containing the link's URL
              type: string
              format: uri-reference
            meta:
              $ref: '#/components/schemas/meta'
    links:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/link'
    reltoone:
      description: a singular 'to-one' relationship
      type: object
      properties:
        links:
          $ref: '#/components/schemas/relationshipLinks'
        data:
          $ref: '#/components/schemas/relationshipToOne'
        meta:
          $ref: '#/components/schemas/meta'
    relationshipToOne:
      description: reference to other resource in a to-one relationship
      anyOf:
        - $ref: '#/components/schemas/nulltype'
        - $ref: '#/components/schemas/linkage'
    reltomany:
      description: a multiple 'to-many' relationship
      type: object
      properties:
        links:
          $ref: '#/components/schemas/relationshipLinks'
        data:
          $ref: '#/components/schemas/relationshipToMany'
        meta:
          $ref: '#/components/schemas/meta'
    relationshipLinks:
      description: optional references to other resource objects
      type: object
      additionalProperties: true
      properties:
        self:
          $ref: '#/components/schemas/link'
        related:
          $ref: '#/components/schemas/link'
    relationshipToMany:
      description: An array of objects each containing the 'type' and 'id' for to-many
        relationships
      type: array
      items:
        $ref: '#/components/schemas/linkage'
      uniqueItems: true
    ResourceIdentifierObject:
      oneOf:
        - $ref: '#/components/schemas/relationshipToOne'
        - $ref: '#/components/schemas/relationshipToMany'
    linkage:
      type: object
      description: the 'type' and 'id'
      required:
        - type
        - id
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        meta:
          $ref: '#/components/schemas/meta'
    pagination:
      type: object
      properties:
        first:
          $ref: '#/components/schemas/pageref'
        last:
          $ref: '#/components/schemas/pageref'
        prev:
          $ref: '#/components/schemas/pageref'
        next:
          $ref: '#/components/schemas/pageref'
    pageref:
      oneOf:
        - type: string
          format: uri-reference
        - $ref: '#/components/schemas/nulltype'
    failure:
      type: object
      required:
        - errors
      properties:
        errors:
          $ref: '#/components/schemas/errors'
        meta:
          $ref: '#/components/schemas/meta'
        jsonapi:
          $ref: '#/components/schemas/jsonapi'
        links:
          $ref: '#/components/schemas/links'
    errors:
      type: array
      items:
        $ref: '#/components/schemas/error'
      uniqueItems: true
    error:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        status:
          type: string
        links:
          $ref: '#/components/schemas/links'
        code:
          type: string
        title:
          type: string
        detail:
          type: string
        source:
          type: object
          properties:
            pointer:
              type: string
              description: A [JSON Pointer](https://tools.ietf.org/html/rfc6901) to
                the associated entity in the request document [e.g. `/data` for a
                primary data object, or `/data/attributes/title` for a specific attribute.
            parameter:
              type: string
              description: A string indicating which query parameter caused the error.
            meta:
              $ref: '#/components/schemas/meta'
    onlymeta:
      additionalProperties: false
      properties:
        meta:
          $ref: '#/components/schemas/meta'
    meta:
      type: object
      additionalProperties: true
    datum:
      description: singular item
      properties:
        data:
          $ref: '#/components/schemas/resource'
    nulltype:
      type: object
      nullable: true
      default: null
    type:
      type: string
      description: The [type](https://jsonapi.org/format/#document-resource-object-identification)
        member is used to describe resource objects that share common attributes and
        relationships.
    id:
      type: string
      description: "Each resource object\u2019s type and id pair MUST [identify](https://jsonapi.org/format/#document-resource-object-identification)\
        \ a single, unique resource."
    Decision:
      type: object
      x-examples:
        Example 1:
          rendered: '2024-09-17T16:18:26Z'
          published: true
          title: Pre-Governance Mandates
          info: ''
          slug: future-mandates
          current-mode: open
          option-vote-bins: 5
          max-scenarios: 3
          group-results: scenario
          personal-results: all-options
          last-published-at: '2024-09-17T16:18:26Z'
          last-solved-at: '2024-09-17T16:18:26Z'
      required:
        - type
        - id
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/link'
        attributes:
          type: object
          properties:
            published:
              type: boolean
              default: false
              readOnly: true
              nullable: false
              description: has Decision been published
            title:
              type: string
              nullable: false
              description: Identifying string for Decision
            info:
              nullable: true
              description: content for Decision, often with html
              type: string
            slug:
              nullable: false
              description: url-safe unique identifier

              type: string
            current-mode:
              default: pending
              example: open
              nullable: false
              enum:
                - pending
                - open
                - finished
              description: state/mode of decision. Only open Decisions can accept votes
            option-vote-bins:
              type: integer
              nullable: false
              default: 5
              example: 5
              minimum: 1
              maximum: 7
              description: the number of bins to use in voting interfaces and results analysis
            max-scenarios:
              type: integer
              nullable: false
              default: 3
              example: 3
              minimum: 1
              maximum: 5
              description: maximum amount of group scenarios to generate
            group-results:
              default: scenarios
              enum:
                - scenarios
                - all-options
              readOnly: true
              description: type of analysis to perform on group results
            personal-results:
              default: all-options
              example: all-options
              enum:
                - scenarios
                - all-options
              readOnly: true
              description: type of analysis to perform on personal results
            last-published-at:
              type: string
              format: date-time
              readOnly: true
              description: date time of last publish
            last-solved-at:
              type: string
              format: date-time
              readOnly: true
              description: date time of last successful solve
            last-update-at:
              type: string
              format: date-time
              readOnly: true
              description: date time of last config update
        relationships:
          type: object
          properties:
            options:
              $ref: '#/components/schemas/reltomany'
            criterias:
              $ref: '#/components/schemas/reltomany'
            option-categories:
              $ref: '#/components/schemas/reltomany'
    OptionCategory:
      type: object
      required:
        - type
        - id
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/link'
        attributes:
          type: object
          properties:
            title:
              type: string
              nullable: false
              description: Identifying strinG
            info:
              nullable: true
              description: content often with html
              type: string
            slug:
              nullable: false
              description: url-safe unique identifier

              type: string
            weighting:
              type: integer
              description: weighting to apply to item

              nullable: false
              default: 50
            xor:
              type: boolean
              nullable: false
              default: false
              description: toggles one-and-only-one XOR constraint for this OptionCategory
            sort:
              default: 0
              type: integer
        relationships:
          type: object
          properties:
            decision:
              $ref: '#/components/schemas/reltoone'
            options:
              $ref: '#/components/schemas/reltomany'
    Option:
      type: object
      x-examples:
        Example 1:
          title: Standard Token Weighting
          results-title: null
          info: |
            <p>Pre-governance decisions should have standard token weighting, for example, 1 token = 1 vote.</p>
          slug: '12'
          sort: 5
          decision_id: 10
      required:
        - type
        - id
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/link'
        attributes:
          type: object
          properties:
            title:
              type: string
            results-title:
              nullable: true
            info:
              type: string
            slug:
              type: string
            sort:
              type: integer
        relationships:
          type: object
          properties:
            decision:
              $ref: '#/components/schemas/reltoone'
            option-category:
              $ref: '#/components/schemas/reltoone'
    Criteria:
      type: object
      x-examples:
        Example 1:
          title: Stakeholder Alignment
          slug: alignment
          weighting: 100
          info: |
            <p>This form of token-weighted voting facilitates stakeholder alignment.</p>
          sort: 10
      required:
        - type
        - id
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/link'
        attributes:
          type: object
          properties:
            title:
              type: string
              nullable: false
              description: Identifying string
            info:
              nullable: true
              description: content often with html
              type: string
            slug:
              nullable: false
              description: url-safe unique identifier

              type: string
            weighting:
              type: integer
              nullable: false
              description: weighting to apply to item

              default: 50
            sort:
              default: 0
              description: display order
              type: integer
        relationships:
          type: object
          properties:
            decision:
              $ref: '#/components/schemas/reltoone'
    Participant:
      type: object
      x-examples:
        Example 1:
          slug: User1
          influence: 1
          updated_at: '2024-09-17T23:47:41Z'
          decision_id: 1
      required:
        - type
        - id
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/link'
        attributes:
          type: object
          properties:
            slug:
              type: string
              description: unique identifier
            influence:
              type: integer
              description: weighting for votes
            updated-at:
              type: string
              format: date-time
              readOnly: true
        relationships:
          type: object
          properties:
            decision:
              $ref: '#/components/schemas/reltoone'
    BinVote:
      title: BinVote
      required:
        - type
        - id
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/link'
        attributes:
          type: object
          properties:
            bin:
              type: integer
              description: Vote Bin number
        relationships:
          type: object
          properties:
            decision:
              $ref: '#/components/schemas/reltoone'
            criteria:
              $ref: '#/components/schemas/reltoone'
            option:
              $ref: '#/components/schemas/reltoone'
            participant:
              $ref: '#/components/schemas/reltoone'
    ScenarioSet:
      type: object
      x-examples:
        Example 1:
          status: success
          error: null
          scenarios:
            - 1
            - 2
            - 3
      required:
        - type
        - id
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/link'
        attributes:
          type: object
          properties:
            status:
              type: string
            error:
              nullable: true
    Scenario:
      type: object
      x-examples:
        Example 1:
          updated-at: '2024-09-17T16:46:23+0000'
          global: false
          rank: 1
          status: success
          api-id: '4304875'
          scenario-set-id: '7129519'
          quadratic: false
          options:
            - 1
            - 2
            - 3
      required:
        - type
        - id
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/link'
        attributes:
          type: object
          properties:
            updated-at:
              type: string
              format: date-time
              readOnly: true
              description: Date Time of creation
            global:
              type: boolean
              default: false
              readOnly: true
              description: toggle indicating Ranked vs Global scenario
            rank:
              type: integer
              example: 1
              minimum: 0
              maximum: 5
              readOnly: true
            engine-id:
              type: integer
              readOnly: true
              description: internal database id for Ethelo Debugging
          required:
            - global
            - rank
        relationships:
          type: object
          properties:
            scenario-set:
              $ref: '#/components/schemas/reltoone'
            scenario-results:
              $ref: '#/components/schemas/reltomany'
            decision:
              $ref: '#/components/schemas/reltoone'
            participant:
              $ref: '#/components/schemas/reltoone'
            options:
              $ref: '#/components/schemas/reltomany'
    ScenarioResult:
      type: object
      x-examples:
        Example 1:
          updated-at: '2024-09-17T16:46:23+0000'
          ethelo: 0.31899
          approval: 0.42857
          support: 0.08929
          dissonance: 0.16518
          average-weight: null
          histogram:
            - 4
            - 3
            - 7
            - 5
            - 5
          advanced-total: 0
          advanced-votes: 0
          total-votes: 7
          negative-votes: 7
          neutral-votes: 7
          positive-votes: 10
          abstain-votes: 2
          option-id: '68903'
          scenario-id: null
          criteria-id: null
          option-category-id: null
          participant-id: null
      required:
        - type
        - id
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/id'
        links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/link'
        attributes:
          type: object
          properties:

            ethelo:
              type: number
            updated-at:
              type: string
              format: date-time
            approval:
              type: number
            support:
              type: number
            dissonance:
              type: number
            histogram:
              type: array
              items:
                type: integer
            total-votes:
              type: integer
            negative-votes:
              type: integer
            neutral-votes:
              type: integer
            positive-votes:
              type: integer
            abstain-votes:
              type: integer
          required:
            - ethelo
            - approval
            - support
            - dissonance
        relationships:
          type: object
          properties:
            scenario-set:
              $ref: '#/components/schemas/reltoone'
            scenario-results:
              $ref: '#/components/schemas/reltomany'
            decision:
              $ref: '#/components/schemas/reltoone'
            participant:
              $ref: '#/components/schemas/reltoone'
            options:
              $ref: '#/components/schemas/reltomany'
  parameters:
    include:
      name: include
      in: query
      description: '[list of included related resources](https://jsonapi.org/format/#fetching-includes)'
      required: false
      style: form
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: '[sparse fieldsets](https://jsonapi.org/format/#fetching-sparse-fieldsets).

        Use fields[\<typename\>]=field1,field2,...,fieldN'
      required: false
      style: deepObject
      schema:
        type: object
      explode: true
    sort:
      name: sort
      in: query
      description: '[list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)'
      required: false
      style: form
      schema:
        type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: basic authentication
servers:
  - url: http://localhost:8000
    description: local dev
security:
  - basicAuth: []
  - sessionAuth: []
